{"version":3,"sources":["../../es6/user/controller.js"],"names":[],"mappings":";;;;;;;;sBAAqB,SAAS;;oBACb,SAAS;;;;uBACJ,eAAe;;qBACjB,cAAc;;AAElC,IAAM,QAAQ,GAAG,QALT,MAAM,EAKW,CAAC;;;AAG1B,SAAS,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;;AAE/B,oBAAK,GAAG,EAAE,CAAC,IAAI,CAAC,UAAA,KAAK,EAAI;AACvB,OAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GACjB,CAAC,CAAC;CAEJ;;AAED,SAAS,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;;;;;;;;;;AAU9B,MAAI,CAAC,GAAG;AACN,4BAAwB,EAAE,4BAA4B;AACtD,gCAA4B,EAAE,wBAAwB;GACvD,CAAC;;kBAE4B,GAAG,CAAC,IAAI;MAAjC,KAAK,aAAL,KAAK;MAAE,IAAI,aAAJ,IAAI;MAAE,QAAQ,aAAR,QAAQ;;AAC1B,MAAI,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;;AAEtB,SAAO,kBAAK,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK,EAAI;;AAEvC,QAAI,CAAC,KAAK,EAAE;AACV,aAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,WAAW,EAAE,KAAK,EAAL,KAAK,EAAC,CAAC,CAAC;KAC5D;;AAED,QAAI,IAAI,GAAG,EAAC,KAAK,EAAL,KAAK,EAAE,KAAK,EAAL,KAAK,EAAE,IAAI,EAAJ,IAAI,EAAE,QAAQ,EAAR,QAAQ,EAAC,CAAC;;AAE1C,QAAI,MAAM,EAAE;AACV,UAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACtB;;AAED,QAAI,GAAG,kBAAK,QAAQ,CAAC,IAAI,CAAC,CAAC;;AAE3B,WAAO,SA9CH,OAAO,CA8CI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAC/B,kBAAK,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM,EAAI;AAC/B,aAAO,MAAM,CAAC,MAAM,KAAK,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,sBAAsB,EAAC,CAAC,CAAC;KAC5G,CAAC,SACI,CAAC,UAAA,GAAG;aAAI,IAAI,CAAC,GAAG,CAAC;KAAA,CAAC,CAAC;GAE5B,CAAC,CAAC;CACJ;;;AAGD,SAAS,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;;AAE5B,MAAI,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;;AAE7B,oBAAK,GAAG,CAAC,KAAK,CAAC,CACZ,IAAI,CAAC,UAAA,IAAI,EAAI;AACZ,QAAI,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,gBAAgB,EAAC,CAAC,CAAC;GAC3E,CAAC,SACI,CAAC,UAAA,GAAG;WAAI,IAAI,CAAC,GAAG,CAAC;GAAA,CAAC,CAAC;CAE5B;;;;;AAKD,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;;qBAEZ,EAAC,QAAQ,EAAR,QAAQ,EAAC","file":"es6/user/controller.js","sourcesContent":["import {Router} from 'express';\nimport User from './model';\nimport {isError} from 'js-type-check';\nimport {group} from 'parse-config';\n\nconst register = Router();\n\n// not in use\nfunction findAll(req, res, next) {\n\n  User.all().then(users => {\n    res.json(users);\n  });\n\n}\n\nfunction insert(req, res, next) {\n\n  // logic\n  // same as register page, but with extra field for group name\n  // create group, with primary contact email (group consensus allows change)\n  // create user\n  // return token\n  // carry on\n  //req.body.group = group;\n\n  let s = {\n    'damonrmcminn@gmail.com': 'sarah.r.m.gibson@gmail.com',\n    'sarah.r.m.gibson@gmail.com': 'damonrmcminn@gmail.com'\n  };\n\n  let {email, name, password} = req.body;\n  let shared = s[email];\n\n  return User.inGroup(email).then(group => {\n\n    if (!group) {\n      return res.status(403).json({message: 'bad email', email});\n    }\n\n    let user = {group, email, name, password};\n\n    if (shared) {\n      user.shared = shared;\n    }\n\n    user = User.validate(user);\n\n    return isError(user) ? next(user) : \n      User.insert(user).then(result => {\n        return result.errors === 0 ? res.sendStatus(200) : res.status(400).json({message: 'Email already exists'});\n      })\n      .catch(err => next(err));\n\n  });\n}\n\n// not in use\nfunction find(req, res, next) {\n\n  let email = req.params.email;\n\n  User.get(email)\n    .then(user => {\n      user ? res.json(user) : res.status(404).json({message: 'User not found'});\n    })\n    .catch(err => next(err));\n\n}\n\n//router.get('/', findAll);\n\n//find.get('/:email', find);\nregister.post('/', insert);\n\nexport default {register};\n"]}