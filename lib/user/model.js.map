{"version":3,"sources":["../../es6/user/model.js"],"names":[],"mappings":";;;;;;;;kBAAe,OAAO;;;;4BACG,QAAQ;;;;oBAChB,cAAc;;;;AAE/B,IAAM,CAAC,GAAG,gBAAG,CAAC,CAAC;AACf,IAAM,IAAI,GAAG,gBAAG,IAAI,CAAC;;AAErB,IAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;;AAE/B,IAAI,QAAQ,GAAG,0BAAa,CAC1B;AACE,OAAK,EAAE,OAAO;AACd,MAAI,EAAE,MAAM;AACZ,UAAQ,EAAE,IAAI;CACf,EACD;AACE,OAAK,EAAE,MAAM;AACb,MAAI,EAAE,MAAM;AACZ,UAAQ,EAAE,IAAI;CACf,EACD;AACE,OAAK,EAAE,UAAU;AACjB,MAAI,EAAE,MAAM;AACZ,UAAQ,EAAE,IAAI;CACf,EACD;AACE,OAAK,EAAE,OAAO;AACd,MAAI,EAAE,MAAM;AACZ,UAAQ,EAAE,IAAI;CACf,EACD;AACE,OAAK,EAAE,QAAQ;AACf,MAAI,EAAE,MAAM;CACb,CACF,CAAC,CAAC;;AAGH,SAAS,MAAM,CAAC,IAAI,EAAE;MAEf,KAAK,GAAmC,IAAI,CAA5C,KAAK;MAAE,IAAI,GAA6B,IAAI,CAArC,IAAI;MAAE,QAAQ,GAAmB,IAAI,CAA/B,QAAQ;MAAE,KAAK,GAAY,IAAI,CAArB,KAAK;MAAE,MAAM,GAAI,IAAI,CAAd,MAAM;;AAEzC,SAAO,kBAAK,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM,EAAI;AACnC,QAAI,GAAG,GAAG,EAAC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAJ,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAL,KAAK,EAAC,CAAC;;;AAGrD,QAAI,MAAM,EAAE;AACV,SAAG,CAAC,MAAM,GAAG,MAAM,CAAC;KACrB;;AAED,WAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;GACpC,CAAC,CAAC;CACJ,CAAC;;AAEF,SAAS,GAAG,GAAG;AACb,SAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CACnB,IAAI,CAAC,gBAAG,OAAO,CAAC,CAAC;CACrB;;AAED,SAAS,GAAG,CAAC,KAAK,EAAE;;AAElB,SAAO,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;CAEnC;;AAED,SAAS,OAAO,CAAC,KAAK,EAAE;;AAEtB,SAAO,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CACrB,MAAM,CAAC,UAAA,KAAK;WAAI,KAAK,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;GAAA,CAAC,CACjD,IAAI,CAAC,CACL,GAAG,CAAC,CAAC,CAAC,WACC,CAAC,KAAK,CAAC;GACd,GAAG,CAAC,IAAI,CAAC,CAAC;CAEd;;qBAEc,EAAC,MAAM,EAAN,MAAM,EAAE,GAAG,EAAH,GAAG,EAAE,QAAQ,EAAR,QAAQ,EAAE,GAAG,EAAH,GAAG,EAAE,OAAO,EAAP,OAAO,EAAC","file":"es6/user/model.js","sourcesContent":["import db from '../db';\nimport createSchema from 'schema';\nimport hash from '../auth/hash';\n\nconst r = db.r;\nconst conn = db.conn;\n\nconst users = r.table('users');\n\nlet validate = createSchema([\n  {\n    field: 'email',\n    type: String,\n    required: true\n  },\n  {\n    field: 'name',\n    type: String,\n    required: true\n  },\n  {\n    field: 'password',\n    type: String,\n    required: true\n  },\n  {\n    field: 'group',\n    type: String,\n    required: true\n  },\n  {\n    field: 'shared',\n    type: String\n  }\n]);\n\n\nfunction insert(user) {\n  \n  let {email, name, password, group, shared} = user;\n\n  return hash(password).then(hashed => {\n    let doc = {id: email, name, password: hashed, group};\n\n    // rethink no like undefined values\n    if (shared) {\n      doc.shared = shared;\n    }\n\n    return users.insert(doc).run(conn);\n  });\n};\n\nfunction all() {\n  return users.run(conn)\n    .then(db.toArray);\n}\n\nfunction get(email) {\n\n  return users.get(email).run(conn);\n\n}\n\nfunction inGroup(email) {\n\n  return r.table('groups')\n    .filter(group => group('members').contains(email))\n    ('id')\n    .nth(0)\n    .default(false) // catch index out of bounds error\n    .run(conn);\n\n}\n\nexport default {insert, all, validate, get, inGroup};\n"]}