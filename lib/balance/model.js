'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _db = require('../db');

var _groupModel = require('../group/model');

var _groupModel2 = _interopRequireDefault(_groupModel);

var _settle = require('./settle');

var _settle2 = _interopRequireDefault(_settle);

exports['default'] = { get: get, zero: zero };

function balances(group) {

  return _groupModel2['default'].members(group).outerJoin(_db.r.table('expenses').filter(_db.r.not(_db.r.row.hasFields('deleted'))), function (user, expense) {
    return user('email').eq(expense('email'));
  }).zip().map(function (doc) {
    return doc.merge({ amt: doc('amount')['default'](0) });
  }).group('name').sum('amt').ungroup().map(function (x) {
    return { name: x('group'), amount: x('reduction') };
  });
}

function zero(group) {}

function get(group) {

  return balances(group).run(_db.conn).then(function (results) {

    var balances = buildBalances(results);

    var settled = _settle2['default'](balances, 'name', 'owed');

    balances.forEach(function (bal) {

      bal.debts = settled[bal.name] || [];
    });

    return balances;
  });
}

function buildBalances(results) {

  var balances = undefined;

  if (results) {
    (function () {
      var total = results.map(function (result) {
        return result.amount;
      }).reduce(function (prev, curr) {
        return prev + curr;
      });

      // always round up to closest 1p
      var each = Math.ceil(total / results.length * 100) / 100;

      balances = results.map(function (result) {

        var owe = each - result.amount;
        var owed = result.amount - each;

        return {
          name: result.name,
          balance: result.amount,
          each: each,
          owe: owe,
          owed: owed
        };
      }).sort(function (a, b) {
        return a.name.toLowerCase() > b.name.toLowerCase();
      });
    })();
  }

  return balances || [];
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,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RWhDLGVBQU87QUFDTCxjQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7QUFDakIsaUJBQU8sRUFBRSxNQUFNLENBQUMsTUFBTTtBQUN0QixjQUFJLEVBQUosSUFBSTtBQUNKLGFBQUcsRUFBSCxHQUFHO0FBQ0gsY0FBSSxFQUFKLElBQUk7U0FDTCxDQUFDO09BQ0gsQ0FBQyxDQUNELElBQUksQ0FBQyxVQUFDLENBQUMsRUFBQyxDQUFDO2VBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtPQUFBLENBQUMsQ0FBQzs7R0FDN0Q7O0FBRUQsU0FBTyxRQUFRLElBQUksRUFBRSxDQUFDO0NBQ3ZCIiwiZmlsZSI6ImJhbGFuY2UvbW9kZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3IsIGNvbm59IGZyb20gJy4uL2RiJztcbmltcG9ydCBHcm91cCBmcm9tICcuLi9ncm91cC9tb2RlbCc7XG5pbXBvcnQgc2V0dGxlIGZyb20gJy4vc2V0dGxlJztcblxuZXhwb3J0IGRlZmF1bHQge2dldCwgemVyb307XG5cbmZ1bmN0aW9uIGJhbGFuY2VzKGdyb3VwKSB7XG5cbiAgcmV0dXJuIEdyb3VwLm1lbWJlcnMoZ3JvdXApXG4gIC5vdXRlckpvaW4oci50YWJsZSgnZXhwZW5zZXMnKS5maWx0ZXIoci5ub3Qoci5yb3cuaGFzRmllbGRzKCdkZWxldGVkJykpKSxcbiAgICAodXNlciwgZXhwZW5zZSkgPT4ge1xuICAgICAgcmV0dXJuIHVzZXIoJ2VtYWlsJykuZXEoZXhwZW5zZSgnZW1haWwnKSk7XG4gIH0pXG4gIC56aXAoKVxuICAubWFwKGRvYyA9PiB7XG4gICAgcmV0dXJuIGRvYy5tZXJnZSh7YW10OiBkb2MoJ2Ftb3VudCcpLmRlZmF1bHQoMCl9KTtcbiAgfSlcbiAgLmdyb3VwKCduYW1lJylcbiAgLnN1bSgnYW10JylcbiAgLnVuZ3JvdXAoKVxuICAubWFwKHggPT4ge1xuICAgIHJldHVybiB7bmFtZTogeCgnZ3JvdXAnKSwgYW1vdW50OiB4KCdyZWR1Y3Rpb24nKX1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHplcm8oZ3JvdXApIHtcbn1cblxuZnVuY3Rpb24gZ2V0KGdyb3VwKSB7XG5cbiAgcmV0dXJuIGJhbGFuY2VzKGdyb3VwKVxuICAgIC5ydW4oY29ubilcbiAgICAudGhlbihyZXN1bHRzID0+IHtcblxuICAgICAgbGV0IGJhbGFuY2VzID0gYnVpbGRCYWxhbmNlcyhyZXN1bHRzKTtcblxuICAgICAgbGV0IHNldHRsZWQgPSBzZXR0bGUoYmFsYW5jZXMsICduYW1lJywgJ293ZWQnKTtcblxuICAgICAgYmFsYW5jZXMuZm9yRWFjaChiYWwgPT4ge1xuXG4gICAgICAgIGJhbC5kZWJ0cyA9IHNldHRsZWRbYmFsLm5hbWVdIHx8IFtdO1xuXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhbGFuY2VzO1xuXG4gICAgfSk7XG5cbn1cblxuZnVuY3Rpb24gYnVpbGRCYWxhbmNlcyhyZXN1bHRzKSB7XG5cbiAgbGV0IGJhbGFuY2VzO1xuXG4gIGlmIChyZXN1bHRzKSB7XG4gICAgbGV0IHRvdGFsID0gcmVzdWx0cy5tYXAocmVzdWx0ID0+IHJlc3VsdC5hbW91bnQpXG4gICAgICAucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBwcmV2ICsgY3Vycik7XG5cbiAgICAvLyBhbHdheXMgcm91bmQgdXAgdG8gY2xvc2VzdCAxcFxuICAgIGxldCBlYWNoID0gTWF0aC5jZWlsKCh0b3RhbC9yZXN1bHRzLmxlbmd0aCkqMTAwKS8xMDA7XG5cbiAgICBiYWxhbmNlcyA9IHJlc3VsdHMubWFwKHJlc3VsdCA9PiB7XG5cbiAgICAgIGxldCBvd2UgPSBlYWNoIC0gcmVzdWx0LmFtb3VudDtcbiAgICAgIGxldCBvd2VkID0gcmVzdWx0LmFtb3VudCAtIGVhY2g7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHJlc3VsdC5uYW1lLFxuICAgICAgICBiYWxhbmNlOiByZXN1bHQuYW1vdW50LFxuICAgICAgICBlYWNoLFxuICAgICAgICBvd2UsXG4gICAgICAgIG93ZWQgXG4gICAgICB9O1xuICAgIH0pXG4gICAgLnNvcnQoKGEsYikgPT4gYS5uYW1lLnRvTG93ZXJDYXNlKCkgPiBiLm5hbWUudG9Mb3dlckNhc2UoKSk7XG4gIH1cblxuICByZXR1cm4gYmFsYW5jZXMgfHwgW107XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=