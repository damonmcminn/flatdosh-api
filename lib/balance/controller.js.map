{"version":3,"sources":["../../es6/balance/controller.js"],"names":[],"mappings":"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","file":"es6/balance/controller.js","sourcesContent":["import {Router} from 'express';\nimport Expense from '../expense/model';\nimport {isError} from 'js-type-check';\nimport {r, conn} from '../db';\n\nconst router = Router();\n\nexport default router;\n\nfunction getBalances(req, res, next) {\n\n  let {group} = req.user;\n\n  r.table('groups')\n    .get(group)\n    .getField('members')\n    .outerJoin(r.table('users'), (member, user) => member.eq(user('id')))\n    .map(u => {\n      return {\n        email: u('left'),\n        name: u('right')('name').default(u('left'))\n      }\n    })\n    .outerJoin(r.table('expenses').filter(r.not(r.row.hasFields('deleted'))),\n      (user, expense) => {\n        return user('email').eq(expense('email'));\n    })\n    .zip()\n    .map(doc => {\n      return doc.merge({amt: doc('amount').default(0)});\n    })\n    .group('name')\n    .sum('amt')\n    .ungroup()\n    .map(x => {\n      return {name: x('group'), amount: x('reduction')}\n    })\n    .run(conn)\n    .then(results => {\n\n      let balances;\n\n      if (results) {\n        let total = results.map(result => result.amount)\n          .reduce((prev, curr) => prev + curr);\n\n        let largest = results.map(result => result.amount)\n          .reduce((prev, curr) => {\n            return prev > curr ? prev : curr;\n          });\n\n        let each = total/results.length;\n        let largestCredit = results.map(result => result.amount - each)\n          .reduce((p,c) => p > c ? p : c);\n        \n        balances = results.map(result => {\n          return {\n            name: result.name,\n            Oldbalance: +((result.amount - largest).toFixed(2)),\n            balance: +(((result.amount - each) - largestCredit).toFixed(2)),\n            behind: result.amount - each\n          };\n        })\n        // empty if not balances, let's show them all for the timebeing\n        //.filter(result => result.balance < 0)\n        .sort((a,b) => a.name.toLowerCase() > b.name.toLowerCase());\n      }\n      res.json(balances || []);\n    });\n}\n\nrouter.get('/', getBalances);\n"]}