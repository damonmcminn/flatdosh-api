{"version":3,"sources":["../../es6/auth/findUser.js"],"names":[],"mappings":";;;;;;;qBAUwB,QAAQ;;wBAVX,gBAAgB;;;;oBACpB,iBAAiB;;;;4BACT,sBAAsB;;;;mBAC/B,QAAQ;;;;oBACP,eAAe;;;;qBACf,QAAQ;;;;AAEzB,IAAM,UAAU,GAAG,sBAAS,WAAW,CAAC,OAAO,CAAC,CAAC;AACjD,IAAM,SAAS,GAAG,0BAAa,MAAM,CAAC,CAAC;;AAExB,SAAS,QAAQ,CAAC,GAAG,EAAE;;AAEpC,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AACzB,MAAM,YAAY,GAAG,KAAK,GAAG,AAAC,GAAG,GAAC,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,IAAI,GAAE,CAAC,CAAC;AACnD,MAAI,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;;;AAGvC,MAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;MAC3B,IAAI,GAAc,MAAM,CAAxB,IAAI;MAAE,QAAQ,GAAI,MAAM,CAAlB,QAAQ;;;AAGnB,mBAAI,IAAI,CAAC,EAAC,KAAK,EAAE,IAAI,IAAI,MAAM,EAAC,CAAC,CAAC;;AAElC,MAAI,CAAC,MAAM;AAAE,WAAO,OAAO,CAAC,MAAM,CAAC,SAAS,uBAAoB,MAAM,CAAG,CAAC,CAAC;GAAA,AAE3E,OAAO,kBAAK,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM,EAAI;;AAEnC,QAAI,MAAM,EAAE;UACL,EAAE,GAA0B,MAAM,CAAlC,EAAE;UAAE,KAAI,GAAoB,MAAM,CAA9B,IAAI;UAAE,MAAM,GAAY,MAAM,CAAxB,MAAM;UAAE,MAAM,GAAI,MAAM,CAAhB,MAAM;;AAE7B,UAAI,OAAO,GAAG;AACZ,UAAE,EAAF,EAAE;AACF,WAAG,EAAE,YAAY;OAClB,CAAC;;AAEF,UAAI,KAAI,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC3B,UAAI,KAAK,GAAG,QAAQ,CAAC;AACrB,UAAI,IAAI,GAAG,EAAC,EAAE,EAAF,EAAE,EAAE,IAAI,EAAJ,KAAI,EAAE,MAAM,EAAN,MAAM,EAAE,MAAM,EAAN,MAAM,EAAC,CAAC;;AAEtC,aAAO,OAAO,CAAC,OAAO,CAAC,EAAC,OAAO,EAAP,OAAO,EAAE,IAAI,EAAJ,KAAI,EAAE,KAAK,EAAL,KAAK,EAAE,IAAI,EAAJ,IAAI,EAAC,CAAC,CAAC;KACtD,MAAM;AACL,aAAO,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;KACpD;GAEF,CAAC,SACI,CAAC,UAAA,GAAG;WAAI,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;GAAA,CAAC,CAAC;CAEpC","file":"es6/auth/findUser.js","sourcesContent":["import authUtil from 'auth-utilities';\nimport auth from 'auth-middleware';\nimport ErrorFactory from 'simple-error-factory';\nimport log from '../log';\nimport User from '../user/model';\nimport hash from './hash';\n\nconst parseBasic = authUtil.parseHeader('basic');\nconst AuthError = ErrorFactory('auth');\n\nexport default function findUser(req) {\n\n  const TODAY = Date.now();\n  const THREE_MONTHS = TODAY + (365*24*60*60*1000)/4;\n  let header = req.headers.authorization;\n\n  // undefined if false\n  let parsed = parseBasic(header);\n  let {user, password} = parsed;\n\n  // logging base64 encoded password here... possibly\n  log.info({login: user || header});\n\n  if (!parsed) return Promise.reject(AuthError(`Couldn't parse: ${header}`));\n\n  return User.get(user).then(result => {\n\n    if (result) {\n      let {id, name, groups, shared} = result;\n\n      let payload = {\n        id,\n        exp: THREE_MONTHS\n      };\n\n      let hash = result.password;\n      let plain = password;\n      let data = {id, name, shared, groups};\n\n      return Promise.resolve({payload, hash, plain, data});\n    } else {\n      return Promise.reject(AuthError('User not found'));\n    }\n\n  })\n  .catch(err => Promise.reject(err));\n\n}\n"]}